from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from app.keyboards import main_menu, goal_submenu, premium_menu, profile_menu, after_recipe_menu
from app import storage
from app.providers.yandex_vision import YandexRecipes

recipes = YandexRecipes()

import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = """
üç≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-Chef! üë®‚Äçüç≥

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º! 

‚ú® –ß—Ç–æ —è —É–º–µ—é:

‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ—á–Ω–æ–µ –ö–ë–ñ–£ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Ä—Ü–∏–∏
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–Ω—è
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å –¥–æ—Å—Ç–∏–≥–∞—Ç—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è

üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    await update.message.reply_text(text, reply_markup=main_menu())

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = """
‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è AI-Chef üç≥

‚ú® 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:
1. üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ üìù –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
2. üç≥ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç —Å —Ç–æ—á–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –ö–ë–ñ–£
3. ‚≠êÔ∏è –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ä–µ—Ü–µ–ø—Ç—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ

üïí –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:
 /daily 09:00 on` ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ —Ä–µ—Ü–µ–ø—Ç –≤ 9 —É—Ç—Ä–∞
 /daily off` ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É

üìä –û —Ä–∞—Å—á–µ—Ç–∞—Ö –ö–ë–ñ–£:
‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ, –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ—Ä—Ü–∏–π
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
‚Ä¢ –î–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤

üéØ –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üì∏ —Ñ–æ—Ç–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ üéØ —Ü–µ–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ üç≥ –ª—é–±–∏–º—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    """
    await update.message.reply_text(text)

async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = storage.list_ingredients(update.effective_user.id)
    if not rows:
        return await update.message.reply_text("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç.")
    text = "–í–∞—à–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n" + "\n".join(f"{i}. {n}" for i, n, _ in rows[:50])
    await update.message.reply_text(text)

async def del_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    storage.clear_ingredients(update.effective_user.id)
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω ‚úÖ")

async def daily_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    time = None
    enabled = None
    if len(args) == 1:
        enabled = 1 if args[0].lower() == "on" else 0
    elif len(args) == 2:
        time = args[0]
        enabled = 1 if args[1].lower() == "on" else 0
    else:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /daily 09:00 on|off")

    if time:
        storage.upsert_user(update.effective_user.id, daily_time=time)
    if enabled is not None:
        storage.upsert_user(update.effective_user.id, enabled=enabled)
    await update.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if enabled else "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ üõë")



async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip() if update.message and update.message.text else ""
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–Ω—è—Ç ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    if storage.get_flag(user_id, "busy"):
        return await update.message.reply_text("‚è≥ –Ø —Å–µ–π—á–∞—Å –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç ‚Äî –ø–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    if storage.get_flag(user_id, "await_manual"):
        items = [x.strip() for x in text.split(",") if x.strip()]
        if not items:
            return await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫")
        # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ busy
        storage.set_flag(user_id, "busy", True)
        try:
            storage.add_ingredients(user_id, items)
            ai = YandexRecipes()
            reply = await ai.recipe_with_macros(items)
        except Exception as e:
            storage.set_flag(user_id, "busy", False)
            storage.set_flag(user_id, "await_manual", False)
            return await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        # –°–±—Ä–æ—Å–∏–º —Ñ–ª–∞–≥–∏
        storage.set_flag(user_id, "busy", False)
        storage.set_flag(user_id, "await_manual", False)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –≤ context.user_data
        context.user_data["last_generated_recipe"] = {
            "text": reply,
            "ingredients": items,
            "title": items[0] if items else "–†–µ—Ü–µ–ø—Ç"
        }

        await update.message.reply_text(reply, reply_markup=after_recipe_menu())
        return

    # –ò–Ω–∞—á–µ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
    await update.message.reply_text("–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Ä—É—á–Ω—É—é, –Ω–∞–∂–º–∏—Ç–µ: ‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Ä—É—á–Ω—É—é –≤ –º–µ–Ω—é.", reply_markup=main_menu())


async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    user_id = q.from_user.id

    if data == "surprise_recipe":
        # (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å ‚Äî –ø—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É)
        import datetime
        from app import seasonal
        month = datetime.datetime.now().month
        seasonal_recipes = seasonal.SEASONAL.get(month, [])
        recipe_name = seasonal_recipes[0] if seasonal_recipes else "–°–µ–∑–æ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"
        ai = YandexRecipes()
        reply = await ai.recipe_with_macros([recipe_name])
        await q.message.edit_text(f"‚ú® –†–µ—Ü–µ–ø—Ç –¥–Ω—è!\n\n{reply}", reply_markup=main_menu())

    elif data == "goal_recipe":
        await q.message.edit_text("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", reply_markup=goal_submenu())

    elif data == "upload_photo":
        await q.message.edit_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n\n–°–æ–≤–µ—Ç: —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")

    elif data == "manual_input":
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        storage.set_flag(user_id, "await_manual", True)
        await q.message.edit_text(
            "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n"
            "–ü—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫, –º–æ—Ä–∫–æ–≤—å\n\n"
            "–Ø –ø—Ä–µ–¥–ª–æ–∂—É —Ä–µ—Ü–µ–ø—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º –ö–ë–ñ–£!",
        )

    elif data == "regenerate":
        last = storage.get_last_ingredients(user_id)
        if not last:
            return await q.message.edit_text("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã.", reply_markup=main_menu())
        if storage.get_flag(user_id, "busy"):
            return await q.message.reply_text("‚è≥ –Ø —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        storage.set_flag(user_id, "busy", True)
        try:
            ai = YandexRecipes()
            reply = await ai.recipe_with_macros(last)
        except Exception as e:
            storage.set_flag(user_id, "busy", False)
            return await q.message.edit_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", reply_markup=main_menu())
        storage.set_flag(user_id, "busy", False)
        context.user_data["last_generated_recipe"] = {"text": reply, "ingredients": last, "title": last[0] if last else "–†–µ—Ü–µ–ø—Ç"}
        await q.message.edit_text(reply, reply_markup=after_recipe_menu())

    elif data == "save_recipe":
        last = context.user_data.get("last_generated_recipe")
        if not last:
            return await q.message.reply_text("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç.", reply_markup=main_menu())
        storage.save_recipe_for_user(user_id, last.get("title", "–†–µ—Ü–µ–ø—Ç"), last["text"], last["ingredients"])
        await q.message.reply_text("‚úÖ –†–µ—Ü–µ–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=profile_menu())

    elif data == "my_products":
        ingredients = storage.list_ingredients(q.from_user.id)
        if not ingredients:
            text = "üç≥ <b>–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b>\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é."
        else:
            text = "üç≥ <b>–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b>\n\n" + "\n".join([f"‚Ä¢ {name}" for _, name, _ in ingredients[:10]])
            if len(ingredients) > 10:
                text += f"\n\n... –∏ –µ—â–µ {len(ingredients) - 10} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
        await q.message.edit_text(text, reply_markup=profile_menu(), parse_mode='HTML')

    elif data == "clear_products":
        storage.clear_ingredients(q.from_user.id)
        await q.message.edit_text(
            "üóë <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—á–∏—â–µ–Ω</b>\n\n"
            "–í—Å–µ –≤–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
            reply_markup=profile_menu(),
            parse_mode='HTML'
        )

    elif data == "back_to_main":
        await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_menu())

    elif data == "buy_pro":
        await q.message.edit_text(
            "üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ PRO –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "–î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            reply_markup=premium_menu(),
            parse_mode='HTML'
        )

    elif data == "change_goal":
        await q.message.edit_text("üéØ <b>–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=profile_menu(), parse_mode='HTML')


async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –µ—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
    await update.message.reply_text(
        "üîÑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç–µ–∫—Å—Ç–æ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
        reply_markup=main_menu()
    )
 
async def premium_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
     await update.message.reply_text(
        "üåü <b>Premium —Ä–µ—Ü–µ–ø—Ç—ã PRO</b>\n\n"
        "–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n"
        "‚Ä¢ –ë–æ–ª–µ–µ 1000 –ø—Ä–µ–º–∏—É–º —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=premium_menu(),
        parse_mode='HTML'
    )
     
async def profile_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    ingredients = storage.list_ingredients(user_id)
    ingredients_count = len(ingredients)
    last_three = ', '.join([name for _, name, _ in ingredients[:3]]) if ingredients else '–Ω–µ—Ç'
    await update.message.reply_text(
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {ingredients_count}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {last_three}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=profile_menu(),
        parse_mode='HTML'
    )