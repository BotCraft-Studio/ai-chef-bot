from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from app.keyboards import main_menu
from app import storage

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    storage.upsert_user(update.effective_user.id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–≤–∞—Ä üë®‚Äçüç≥.\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –ø—Ä–µ–¥–ª–æ–∂—É —Ä–µ—Ü–µ–ø—Ç —Å –ö–ë–ñ–£.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /help, /daily 09:00 on|off, /list, /del",
        reply_markup=main_menu()
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1) –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n"
        "2) –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: '–∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫'.\n"
        "3) –í–∫–ª—é—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É: /daily 09:00 on\n"
        "–ö–ë–ñ–£ ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è."
    )

async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = storage.list_ingredients(update.effective_user.id)
    if not rows:
        return await update.message.reply_text("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç.")
    text = "–í–∞—à–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n" + "\n".join(f"{i}. {n}" for i, n, _ in rows[:20])
    await update.message.reply_text(text)

async def del_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    storage.clear_ingredients(update.effective_user.id)
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω ‚úÖ")

async def daily_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    time = None
    enabled = None
    if len(args) == 1:
        enabled = 1 if args[0].lower() == "on" else 0
    elif len(args) == 2:
        time = args[0]
        enabled = 1 if args[1].lower() == "on" else 0
    else:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /daily 09:00 on|off")

    if time:
        storage.upsert_user(update.effective_user.id, daily_time=time)
    if enabled is not None:
        storage.upsert_user(update.effective_user.id, enabled=enabled)
    await update.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if enabled else "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ üõë")

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    items = [x.strip() for x in text.split(",") if x.strip()]
    if not items:
        return await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")
    from app.providers.openai_vision import OpenAIVision
    ai = OpenAIVision()
    reply = await ai.recipe_with_macros(items)
    storage.add_ingredients(update.effective_user.id, items)
    await update.message.reply_text(reply)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    if data == "how_photo":
        await q.message.reply_text("–ù–∞–∂–º–∏—Ç–µ —Å–∫—Ä–µ–ø–∫—É ‚Üí –§–æ—Ç–æ/–í–∏–¥–µ–æ ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ –∫–∞–∫ —Ñ–∞–π–ª). –û—Ç–ø—Ä–∞–≤—å—Ç–µ.")
    elif data == "daily_on":
        storage.upsert_user(q.from_user.id, enabled=1)
        await q.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ (–≤—Ä–µ–º—è —Å–º. /daily)")
    elif data == "daily_off":
        storage.upsert_user(q.from_user.id, enabled=0)
        await q.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ üõë")
    elif data == "list":
        fake_update = Update(update.update_id, message=q.message)
        await list_cmd(fake_update, context)
