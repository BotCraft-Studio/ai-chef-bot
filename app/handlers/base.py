from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from app.keyboards import main_menu, goal_submenu, premium_menu, profile_menu
from app import storage
from app.providers.yandex_vision import YandexRecipes
recipes = YandexRecipes()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    storage.upsert_user(update.effective_user.id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–≤–∞—Ä üë®‚Äçüç≥\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=main_menu()
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1) –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n"
        "2) –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: '–∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫'.\n"
        "3) –í–∫–ª—é—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É: /daily 09:00 on\n"
        "–ö–ë–ñ–£ ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è."
    )

async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = storage.list_ingredients(update.effective_user.id)
    if not rows:
        return await update.message.reply_text("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç.")
    text = "–í–∞—à–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n" + "\n".join(f"{i}. {n}" for i, n, _ in rows[:20])
    await update.message.reply_text(text)

async def del_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    storage.clear_ingredients(update.effective_user.id)
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω ‚úÖ")

async def daily_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    time = None
    enabled = None
    if len(args) == 1:
        enabled = 1 if args[0].lower() == "on" else 0
    elif len(args) == 2:
        time = args[0]
        enabled = 1 if args[1].lower() == "on" else 0
    else:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /daily 09:00 on|off")

    if time:
        storage.upsert_user(update.effective_user.id, daily_time=time)
    if enabled is not None:
        storage.upsert_user(update.effective_user.id, enabled=enabled)
    await update.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if enabled else "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ üõë")

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    if not text.startswith('/'):  # –Ω–µ –∫–æ–º–∞–Ω–¥–∞
        items = [x.strip() for x in text.split(",") if x.strip()]
        if items:
            from app.providers.yandex_vision import YandexRecipes
            ai = YandexRecipes()
            reply = await ai.recipe_with_macros(items)
            storage.add_ingredients(update.effective_user.id, items)
            await update.message.reply_text(reply, reply_markup=main_menu())
            return
    
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é")

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    
    if data == "surprise_recipe":
        # –†–µ—Ü–µ–ø—Ç –¥–Ω—è –∏–∑ —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤
        import datetime
        from app import seasonal
        from app.providers.yandex_vision import YandexRecipes
        
        month = datetime.datetime.now().month
        seasonal_recipes = seasonal.SEASONAL.get(month, [])
        recipe_name = seasonal_recipes[0] if seasonal_recipes else "–°–µ–∑–æ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"
        
        ai = YandexRecipes()
        reply = await ai.recipe_with_macros([recipe_name])
        await q.message.edit_text(f"‚ú® –†–µ—Ü–µ–ø—Ç –¥–Ω—è!\n\n{reply}", reply_markup=main_menu())
        
    elif data == "goal_recipe":
        # –ü–æ–¥–º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞
        await q.message.edit_text(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:",
            reply_markup=goal_submenu()
        )

    elif data == "buy_pro":
        await q.message.edit_text(
            "üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ PRO –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "Premium PRO –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤:\n"
            "‚Ä¢ –¶–µ–Ω–∞: 999 —Ä—É–±.\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n"
            "–î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            reply_markup=premium_menu(),
            parse_mode='HTML'
        )

    elif data == "change_goal":
        await q.message.edit_text(
            "üéØ <b>–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å:\n"
            "‚Ä¢ –ü–æ—Ö—É–¥–µ–Ω–∏–µ üèÉ‚Äç‚ôÇÔ∏è\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞ ‚öñÔ∏è\n"
            "‚Ä¢ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã üí™\n"
            "‚Ä¢ –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ ü•ó\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=profile_menu(),
            parse_mode='HTML'
        )
        
    elif data == "my_products":
        ingredients = storage.list_ingredients(q.from_user.id)
        if not ingredients:
            text = "üç≥ <b>–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b>\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é."
        else:
            text = "üç≥ <b>–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b>\n\n" + "\n".join([f"‚Ä¢ {name}" for _, name, _ in ingredients[:10]])
            if len(ingredients) > 10:
                text += f"\n\n... –∏ –µ—â–µ {len(ingredients) - 10} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
        
        await q.message.edit_text(text, reply_markup=profile_menu(), parse_mode='HTML')
        
    elif data == "clear_products":
        storage.clear_ingredients(q.from_user.id)
        await q.message.edit_text(
            "üóë <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—á–∏—â–µ–Ω</b>\n\n"
            "–í—Å–µ –≤–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
            reply_markup=profile_menu(),
            parse_mode='HTML'
        )
        
    elif data == "back_to_main":
        await q.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=main_menu()
        )
        
    elif data == "upload_photo":
        await q.message.edit_text(
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n\n"
            "–°–æ–≤–µ—Ç: —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"
        )
        
    elif data == "manual_input":
        await q.message.edit_text(
            "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n"
            "–ü—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫, –º–æ—Ä–∫–æ–≤—å\n\n"
            "–Ø –ø—Ä–µ–¥–ª–æ–∂—É —Ä–µ—Ü–µ–ø—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º –ö–ë–ñ–£!"
        )
        
    elif data == "back_to_main":
        await q.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=main_menu()
        )
        
    elif data == "list":
        fake_update = Update(update.update_id, message=q.message)
        await list_cmd(fake_update, context)


async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
 await update.message.reply_text(
    "üîÑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ç–µ–∫—Å—Ç–æ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
    reply_markup=main_menu()  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: = –≤–º–µ—Å—Ç–æ -
)
 
async def premium_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
     await update.message.reply_text(
        "üåü <b>Premium —Ä–µ—Ü–µ–ø—Ç—ã PRO</b>\n\n"
        "–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n"
        "‚Ä¢ –ë–æ–ª–µ–µ 1000 –ø—Ä–µ–º–∏—É–º —Ä–µ—Ü–µ–ø—Ç–æ–≤\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=premium_menu(),
        parse_mode='HTML'
    )
     
async def profile_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    ingredients = storage.list_ingredients(user_id)
    ingredients_count = len(ingredients)
    
    await update.message.reply_text(
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {ingredients_count}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {', '.join([name for _, name, _ in ingredients[:3]]) if ingredients else '–Ω–µ—Ç'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=profile_menu(),
        parse_mode='HTML'
    )