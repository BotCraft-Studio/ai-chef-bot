"""
–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import datetime
import html
import logging
import re

from telegram import Update, CallbackQuery
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

import storage

from utils.query_utils import smart_capitalize
from keyboards import main_menu, goal_submenu, after_recipe_menu, profile_menu, premium_menu, textback_submenu, photoback_submenu, time_selection_menu, goal_choice_menu
from providers.gigachat import GigaChatText
from utils.bot_utils import APPEND_MODE, SESSION_ITEMS, AWAIT_MANUAL, BUSY, GOAL_CODE, LAST_GENERATED_RECIPE, SELECTED_TIME, TIME_OPTIONS
from utils.goal_utils import GOALS

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

AI = GigaChatText()

SEASONAL = {
    1: ["–¢—ã–∫–≤–µ–Ω–Ω—ã–π –∫—Ä–µ–º-—Å—É–ø", "–ó–∞–ø–µ—á—ë–Ω–Ω—ã–µ –∫–æ—Ä–Ω–µ–ø–ª–æ–¥—ã", "–ì–ª–∏–Ω—Ç–≤–µ–π–Ω –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è"],
    2: ["–õ—É–∫–æ–≤—ã–π —Å—É–ø", "–ü–∞—Å—Ç–∞ —Å –≥—Ä–∏–±–∞–º–∏", "–ß–µ—á–µ–≤–∏—á–Ω—ã–π –¥–∞–ª"],
    3: ["–°–∞–ª–∞—Ç —Å —Ä–µ–¥–∏—Å–æ–º –∏ —è–π—Ü–æ–º", "–ö—Ä–µ–º-—Å—É–ø –∏–∑ —à–ø–∏–Ω–∞—Ç–∞", "–û–∫—Ä–æ—à–∫–∞ –±–µ–∑ –∫–≤–∞—Å–∞"],
    4: ["–†–∏–∑–æ—Ç—Ç–æ —Å–æ —Å–ø–∞—Ä–∂–µ–π", "–ö—É—Ä–∏—Ü–∞ —Å –≥–æ—Ä–æ—à–∫–æ–º", "–ö–ª—É–±–Ω–∏—á–Ω—ã–π —Å–º—É–∑–∏"],
    5: ["–°–∞–ª–∞—Ç –Ω–∏—Å—É–∞–∑", "–®–∞—à–ª—ã–∫ –∏–∑ –æ–≤–æ—â–µ–π", "–¢–∞–±—É–ª–µ"],
    6: ["–û–∫—Ä–æ—à–∫–∞/—Ö–æ–ª–æ–¥–Ω–∏–∫", "–ü–æ–∫–µ —Å –ª–æ—Å–æ—Å–µ–º", "–¢–∞—Ä—Ç —Å–æ —Å–ø–∞—Ä–∂–µ–π"],
    7: ["–ì–∞—Å–ø–∞—á–æ", "–ü–∞—Å—Ç–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏", "–ö–æ–±–±-—Å–∞–ª–∞—Ç"],
    8: ["–°–∞–ª–∞—Ç —Å –∞—Ä–±—É–∑–æ–º –∏ —Ñ–µ—Ç–æ–π", "–†–∞—Ç–∞—Ç—É–π", "–ö—É–∫—É—Ä—É–∑–Ω—ã–µ –æ–ª–∞–¥—å–∏"],
    9: ["–¢—ã–∫–≤–∞ —Å —Ñ–µ—Ç–æ–π", "–®–∞—Ä–ª–æ—Ç–∫–∞", "–õ—ë–≥–∫–∏–π –±–æ—Ä—â"],
    10: ["–ñ–∞—Ä–∫–æ–µ —Å –≥—Ä–∏–±–∞–º–∏", "–ü–µ—Ä–ª–æ—Ç—Ç–æ —Å —Ç—ã–∫–≤–æ–π", "–ü–∏—Ä–æ–≥ —Å –≥—Ä—É—à–µ–π"],
    11: ["–©–∏ –∏–∑ –∫–≤–∞—à–µ–Ω–æ–π –∫–∞–ø—É—Å—Ç—ã", "–ü–ª–æ–≤ —Å –∞–π–≤–æ–π", "–ö—Ä–µ–º-—Å—É–ø –∏–∑ –±—Ä–æ–∫–∫–æ–ª–∏"],
    12: ["–£—Ç–∫–∞ —Å —è–±–ª–æ–∫–∞–º–∏", "–°—ã—Ä–Ω—ã–π –∫—Ä–µ–º-—Å—É–ø", "–ò–º–±–∏—Ä–Ω–æ–µ –ø–µ—á–µ–Ω—å–µ"],
}

async def daily_recipe(query: CallbackQuery | None):
    # 1) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –¢–û –ñ–ï —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –±—É–¥–µ—Ç –∫—Ä–∞—Å–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è)
    await query.message.edit_text(
        ai_progress_text(subtitle="–†–µ—Ü–µ–ø—Ç –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"),
        parse_mode=ParseMode.HTML
    )

    # 2) –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ –¥–Ω—è (–∫–∞–∫ –∏ –±—ã–ª–æ)
    month = datetime.datetime.now().month
    seasonal_recipes = SEASONAL.get(month, [])
    recipe_name = seasonal_recipes[0] if seasonal_recipes else "–°–µ–∑–æ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"

    try:
        # 3) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç —É –ò–ò
        reply = await AI.parse_ingredients([recipe_name])
        pretty = format_recipe_for_telegram(reply)

        # 4) –ó–∞–º–µ–Ω—è–µ–º –±–∞–Ω–Ω–µ—Ä –Ω–∞ –≥–æ—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç (—Å–Ω–æ–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –≤—Ç–æ—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è)
        await query.message.edit_text(
            f"‚ú® –†–µ—Ü–µ–ø—Ç –¥–Ω—è!\n\n{pretty}",
            reply_markup=main_menu(),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
    except Exception:
        # –ª–∞–∫–æ–Ω–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (—Ç–æ–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –±–µ–∑ —Å–ø–∞–º–∞ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)
        await query.message.edit_text(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML
        )


async def add_ingredient(query: CallbackQuery | None, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.setdefault(SESSION_ITEMS, [])
    context.user_data[APPEND_MODE] = True
    context.user_data[AWAIT_MANUAL] = True

    # –¢–æ–∂–µ reply_text ‚Äî –ø—Ä–µ—á–µ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è –≤–∏–¥–∏–º—ã–º
    await query.message.reply_text(
        "–î–æ–±–∞–≤—å –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —è –∏—Ö –î–û–ë–ê–í–õ–Æ –∫ —Ç–µ–∫—É—â–µ–º—É —Å–ø–∏—Å–∫—É.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—ã—Ä, –ø–æ–º–∏–¥–æ—Ä—ã, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ"
    )


async def goal_recipe(query: CallbackQuery | None):
    await query.message.edit_text("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", reply_markup=goal_submenu())


async def upload_photo(query: CallbackQuery | None):
    await query.message.edit_text(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n\n–°–æ–≤–µ—Ç: —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
        reply_markup=textback_submenu(),
    )


async def manual_input(query: CallbackQuery | None, context: ContextTypes.DEFAULT_TYPE):
    # —á–∏—Å—Ç—ã–π –ª–∏—Å—Ç –≤ –°–ï–°–°–ò–ò
    context.user_data[SESSION_ITEMS] = []
    context.user_data[APPEND_MODE] = False
    context.user_data[AWAIT_MANUAL] = True

    # –í–ê–ñ–ù–û: –Ω–µ edit_text (—ç—Ç–æ –∑–∞–º–µ—â–∞–µ—Ç –ø—Ä–µ—á–µ–∫), –∞ reply_text ‚Äî –ø—Ä–µ—á–µ–∫ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è!
    await query.message.edit_text(
        "‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n\n–ü—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫, –º–æ—Ä–∫–æ–≤—å",
        reply_markup=photoback_submenu(),
    )


async def goal_recipe_choice(user_input: str, query: CallbackQuery | None, context: ContextTypes.DEFAULT_TYPE):
    # 1) –ø—Ä–æ–¥—É–∫—Ç—ã –±–µ—Ä—ë–º –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–≤—ë–ª
    items = context.user_data.get(SESSION_ITEMS, [])
    if not items:
        return await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")

    # 2) —á–∏—Ç–∞–µ–º ¬´—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ¬ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
    goal_name = GOALS.get(user_input, "–û–±—ã—á–Ω—ã–π –¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç")

    # 3) –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    if bool(context.user_data.get(BUSY)):
        return await query.message.reply_text("‚è≥ –Ø —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
    context.user_data[BUSY] = True  # –Ω–µ –∑–∞–±—É–¥—å: –∏ —á–∏—Ç–∞–µ–º, –∏ –ø–∏—à–µ–º –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–ª—é—á

    try:
        # (–∞) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä ‚Äî —ç—Ç–æ –¥–∞—Å—Ç –∫—Ä–∞—Å–∏–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é ¬´—Ä–∞—Å—Å—ã–ø–∞–Ω–∏—è¬ª
        await query.message.edit_text(
            ai_progress_text(subtitle=f"–¶–µ–ª—å: <i>{goal_name}</i>"),
            parse_mode=ParseMode.HTML
        )

        # (–±) –≤—ã–∑—ã–≤–∞–µ–º –ò–ò (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
        items_with_goal = [f"–¶–µ–ª—å: {goal_name}"] + items
        reply = await AI.parse_ingredients(items_with_goal)

        # (–≤) –ø—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –∫—Ä–∞—Å–∏–≤–æ–º—É HTML (–∫–∞–∫ —É —Ç–µ–±—è —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ)
        pretty = format_recipe_for_telegram(reply)

        # (–≥) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π¬ª
        context.user_data[GOAL_CODE] = user_input  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "goal_pp"
        context.user_data[LAST_GENERATED_RECIPE] = {
            "text": reply,
            "ingredients": items,
            "title": items[0] if items else "–†–µ—Ü–µ–ø—Ç"
        }

        # (–¥) –∑–∞–º–µ–Ω—è–µ–º –±–∞–Ω–Ω–µ—Ä –Ω–∞ –≥–æ—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç (–µ—â—ë –æ–¥–Ω–∞ –∫—Ä–∞—Å–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è)
        await query.message.edit_text(
            pretty,
            reply_markup=after_recipe_menu(),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(e)
        await query.message.edit_text("‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞.")
    finally:
        context.user_data[BUSY] = False

    return None



async def regenerate_recipe(query: CallbackQuery | None, context: ContextTypes.DEFAULT_TYPE):
    last_ingredients = context.user_data.get(LAST_GENERATED_RECIPE)

    if not last_ingredients:
        return await query.message.edit_text(
            "–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã.",
            reply_markup=main_menu()
        )

    if context.user_data.get(BUSY):
        return await query.message.reply_text("‚è≥ –Ø —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
    context.user_data[BUSY] = True

    try:
        reply = await AI.parse_ingredients(last_ingredients)
        pretty = format_recipe_for_telegram(reply)
    except Exception as e:
        return await query.message.edit_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}", reply_markup=main_menu())
    finally:
        context.user_data[BUSY] = False

    context.user_data[LAST_GENERATED_RECIPE] = {
        "text": pretty,
        "ingredients": last_ingredients,
        "title": last_ingredients[0] if last_ingredients else "–†–µ—Ü–µ–ø—Ç"
    }

    await query.message.edit_text(
        reply,
        reply_markup=after_recipe_menu(),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )

    return None


async def save_recipe(user_id: int, query: CallbackQuery | None, context: ContextTypes.DEFAULT_TYPE):
    last_generated_recipe = context.user_data.get(LAST_GENERATED_RECIPE)

    if not last_generated_recipe:
        return await query.message.reply_text(
            "–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç.",
            reply_markup=main_menu()
        )

    storage.save_recipe_for_user(user_id,
                                 last_generated_recipe.get("title", "–†–µ—Ü–µ–ø—Ç"),
                                 last_generated_recipe["text"],
                                 last_generated_recipe["ingredients"])
    await query.message.reply_text("‚úÖ –†–µ—Ü–µ–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", reply_markup=profile_menu())

    return None


async def my_ingredients(query: CallbackQuery | None):
    ingredients = storage.list_ingredients(query.from_user.id)

    if not ingredients:
        text = "üç≥ <b>–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b>\n\n–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é."
    else:
        text = "üç≥ <b>–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b>\n\n" + "\n".join([f"‚Ä¢ {name}" for _, name, _ in ingredients[:10]])
        if len(ingredients) > 10:
            text += f"\n\n... –∏ –µ—â–µ {len(ingredients) - 10} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"

    await query.message.edit_text(text, reply_markup=profile_menu(), parse_mode='HTML')


async def clear_ingredients(user_id: int, query: CallbackQuery | None):
    storage.clear_ingredients(user_id)
    await query.message.edit_text(
        "üóë <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—á–∏—â–µ–Ω</b>\n\n"
        "–í—Å–µ –≤–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
        reply_markup=profile_menu(),
        parse_mode='HTML'
    )


async def back_to_main_menu(query: CallbackQuery | None):
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=main_menu())


async def buy_pro(query: CallbackQuery | None):
    await query.message.edit_text(
        "üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ PRO –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        reply_markup=premium_menu(),
        parse_mode='HTML'
    )


async def change_goal(query: CallbackQuery | None):
    await query.message.edit_text(
        "üéØ <b>–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=profile_menu(),
        parse_mode='HTML'
    )


# NEW: –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º markdown-–∑–≤—ë–∑–¥–æ—á–∫–∏ –≤ HTML –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–∞
def format_recipe_for_telegram(ai_text: str) -> str:
    """
    –î–µ–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –Ø–Ω–¥–µ–∫—Å GPT –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–∞:
    - **–ó–∞–≥–æ–ª–æ–≤–æ–∫** -> <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>
    - –°—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "* –ü—É–Ω–∫—Ç" -> "‚Ä¢ –ü—É–Ω–∫—Ç"
    - –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–∏–º–≤–æ–ª—ã, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ –ª–æ–º–∞–ª —Ä–∞–∑–º–µ—Ç–∫—É
    """
    # 1) —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ª—é–±—ã–µ <, >, & –∏ —Ç.–ø.
    text = html.escape(ai_text)

    # 2) **–ñ–∏—Ä–Ω—ã–π** -> <b>–ñ–∏—Ä–Ω—ã–π</b>
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)

    # 3) –í –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ "* " -> "‚Ä¢ "
    text = re.sub(r'(?m)^[ \t]*\* +', '‚Ä¢ ', text)

    # 4) –ø—Ä–∏–≤–æ–¥–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫ –¥–≤—É–º
    text = re.sub(r'\n{3,}', '\n\n', text).strip()

    return text


# –ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞
def ai_progress_text(subtitle: str = "") -> str:
    subtitle = f"\n{subtitle}" if subtitle else ""
    return (
        "ü§ñ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò</b>"
        f"{subtitle}\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5‚Äì10 —Å–µ–∫—É–Ω–¥‚Ä¶"
    )


async def show_time_selection_after_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    items = context.user_data.get(SESSION_ITEMS, [])

    if not items:
        return await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
            reply_markup=main_menu()
        )

    # –ö—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    def smart_capitalize(s: str) -> str:
        return " ".join(w[:1].upper() + w[1:] for w in s.split())

    items_text = "\n".join([f"‚Ä¢ {smart_capitalize(item)}" for item in items[:5]])
    if len(items) > 5:
        items_text += f"\n‚Ä¢ ... –∏ –µ—â—ë {len(items) - 5} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_text –≤–º–µ—Å—Ç–æ edit_text
    await update.message.reply_text(
        f"üç≥ <b>–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b> ({len(items)} —à—Ç.):\n\n"
        f"{items_text}\n\n"
        f"‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏:</b>",
        reply_markup=time_selection_menu(),
        parse_mode=ParseMode.HTML
    )
async def goal_recipe_choice_with_time(goal_code: str, time_code: str, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    items = context.user_data.get(SESSION_ITEMS, [])
    if not items:
        return await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")

    goal_name = GOALS.get(goal_code, "–û–±—ã—á–Ω—ã–π –¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç")
    time_display = TIME_OPTIONS.get(time_code, "–ù–µ –≤–∞–∂–Ω–æ")

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    if bool(context.user_data.get(BUSY)):
        return await query.message.reply_text("‚è≥ –Ø —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
    context.user_data[BUSY] = True

    try:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
        await query.message.edit_text(
            ai_progress_text(subtitle=f"–¶–µ–ª—å: <i>{goal_name}</i>, –í—Ä–µ–º—è: <i>{time_display}</i>"),
            parse_mode=ParseMode.HTML
        )

        # –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å –∏ –≤—Ä–µ–º—è –≤ –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
        items_with_goal_and_time = [f"–¶–µ–ª—å: {goal_name}", f"–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏: {time_display}"] + items
        reply = await AI.recipe_with_macros(items_with_goal_and_time)

        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pretty = format_recipe_for_telegram(reply)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π¬ª
        context.user_data[GOAL_CODE] = goal_code
        context.user_data[SELECTED_TIME] = time_code
        context.user_data[LAST_GENERATED_RECIPE] = {
            "text": reply,
            "ingredients": items,
            "title": items[0] if items else "–†–µ—Ü–µ–ø—Ç"
        }

        # –∑–∞–º–µ–Ω—è–µ–º –±–∞–Ω–Ω–µ—Ä –Ω–∞ –≥–æ—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
        await query.message.edit_text(
            pretty,
            reply_markup=after_recipe_menu(),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )

    except Exception as e:
        logger.error(e)
        await query.message.edit_text("‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞.")
    finally:
        context.user_data[BUSY] = False

    return None

async def handle_goal_selection(goal_code: str, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    goal_name = GOALS.get(goal_code, "–û–±—ã—á–Ω—ã–π –¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç")
    context.user_data[GOAL_CODE] = goal_code  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–ª—å

    items = context.user_data.get(SESSION_ITEMS, [])
    items_text = "\n".join([f"‚Ä¢ {smart_capitalize(item)}" for item in items[:5]])
    if len(items) > 5:
        items_text += f"\n‚Ä¢ ... –∏ –µ—â—ë {len(items) - 5} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"

    # –î–û–ë–ê–í–õ–Ø–ï–ú –≠–ú–û–î–ó–ò –î–õ–Ø –ö–ê–ñ–î–û–ô –¶–ï–õ–ò
    goal_emojis = {
        "goal_lose": "üí™",  # –ü–æ—Ö—É–¥–µ—Ç—å
        "goal_pp": "ü•ë",  # –ü–ü
        "goal_fast": "‚ö°Ô∏è",  # –ë—ã—Å—Ç—Ä–æ
        "goal_normal": "üç≤",  # –û–±—ã—á–Ω—ã–µ
        "goal_vegan": "ü•¶",  # –í–µ–≥–∞–Ω
        "goal_keto": "ü•ö"  # –ö–µ—Ç–æ-–ø–∏—Ç–∞–Ω–∏–µ
    }

    goal_emoji = goal_emojis.get(goal_code, "üéØ")

    # ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è –í–û–¢ –ó–î–ï–°–¨ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –î–û–ë–ê–í–õ–Ø–ï–ú {goal_name} ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
    await query.message.edit_text(
        f"üç≥ <b>–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b> ({len(items)} —à—Ç.):\n\n"
        f"{items_text}\n\n"
        f"{goal_emoji} <b>–¶–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è:</b> {goal_name}\n\n"  # ‚Üê –¢–ï–ü–ï–†–¨ –ó–î–ï–°–¨ –ë–£–î–ï–¢ "–ü–æ—Ö—É–¥–µ—Ç—å", "–ü–ü" –∏ —Ç.–¥.
        f"‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏:</b>",
        reply_markup=time_selection_menu(),
        parse_mode=ParseMode.HTML
    )

async def handle_time_selection(time_code: str, query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—Ü–µ–ø—Ç–∞"""
    time_display = TIME_OPTIONS.get(time_code, "–ù–µ –≤–∞–∂–Ω–æ")
    context.user_data[SELECTED_TIME] = time_code

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ü–µ–ª—å
    goal_code = context.user_data.get(GOAL_CODE, "goal_normal")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—Ü–µ–ø—Ç–∞ —Å —Ü–µ–ª—å—é –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    await goal_recipe_choice_with_time(goal_code, time_code, query, context)

async def back_to_goal_selection(query: CallbackQuery, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è"""
    items = context.user_data.get(SESSION_ITEMS, [])
    items_text = "\n".join([f"‚Ä¢ {smart_capitalize(item)}" for item in items[:5]])
    if len(items) > 5:
        items_text += f"\n‚Ä¢ ... –∏ –µ—â—ë {len(items) - 5} –ø—Ä–æ–¥—É–∫—Ç–æ–≤"

    await query.message.edit_text(
        f"üç≥ <b>–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b> ({len(items)} —à—Ç.):\n\n"
        f"{items_text}\n\n"
        f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è:</b>",
        reply_markup=goal_choice_menu(),
        parse_mode=ParseMode.HTML
    )