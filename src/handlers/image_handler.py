"""
–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import io
from PIL import Image
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from providers.gigachat import GigaChatVision
from handlers.base import normalize_items, render_precheck      # —É–∂–µ –µ—Å—Ç—å –≤ base.py
from keyboards import goal_choice_menu
from utils.bot_utils import SESSION_ITEMS, APPEND_MODE, AWAIT_MANUAL

vision = GigaChatVision()

async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_chat.send_message("üì• –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶")
    # 1) —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø—Ä–µ–≤—å—é
    photo = update.message.photo[-1]
    tg_file = await context.bot.get_file(photo.file_id)

    # 2) —Å–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–ª–µ–≥–∫–∞ —É–º–µ–Ω—å—à–∞–µ–º (—É—Å–∫–æ—Ä—è–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ)
    raw = io.BytesIO()
    await tg_file.download_to_memory(out=raw)
    img = Image.open(io.BytesIO(raw.getvalue())).convert("RGB")

    out = io.BytesIO()
    img.thumbnail((1280, 1280))
    img.save(out, format="JPEG", quality=85)
    image_bytes = out.getvalue()

    # 3) —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç—ã –Ø–Ω–¥–µ–∫—Å–æ–º
    try:
        detected = await vision.parse_ingredients(image_bytes)
    except Exception as e:
        return await update.message.reply_text(
            f"üòï –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ: {e}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ (—Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω, –ø—Ä–æ–¥—É–∫—Ç—ã –∫—Ä—É–ø–Ω–æ) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–º."
        )
    
    # –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–æ–≥ –≤ —á–∞—Ç (–ø–æ—Ç–æ–º —É–¥–∞–ª–∏—à—å):
    await update.effective_chat.send_message(f"üîé –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {', '.join(detected) or '‚Äî –ø—É—Å—Ç–æ ‚Äî'}")

    if not detected:
        return await update.message.reply_text(
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º."
        )

    # 4) –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –∫–ª–∞–¥—ë–º –≤ –°–ï–°–°–ò–Æ (–∫–∞–∫ ¬´—á–∏—Å—Ç—ã–π –ª–∏—Å—Ç¬ª)
    norm = normalize_items(detected)
    if not norm:
        return await update.message.reply_text(
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ (—Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω, –ø—Ä–æ–¥—É–∫—Ç—ã –∫—Ä—É–ø–Ω–æ) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º."
        )

    context.user_data[SESSION_ITEMS] = norm
    context.user_data[APPEND_MODE] = False
    context.user_data[AWAIT_MANUAL] = False

    # 5) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ—á–µ–∫ + –≤—ã–±–æ—Ä —Ü–µ–ª–∏ (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–≤–æ–¥–µ)
    precheck = render_precheck(norm, highlights=set(), updated=False)
    await update.message.reply_text(
        precheck,
        reply_markup=goal_choice_menu(),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )
