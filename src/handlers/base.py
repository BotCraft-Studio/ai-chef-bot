import logging
import re

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from handlers.query_handler import (
    back_to_main_menu,
    buy_pro,
    change_goal,
    clear_ingredients,
    daily_recipe,
    goal_recipe,
    goal_recipe_choice,
    manual_input,
    my_ingredients,
    regenerate_recipe,
    save_recipe,
    upload_photo
)
from src.keyboards import goal_choice_menu
from utils import query_utils
from utils.bot_utils import BUSY, AWAIT_MANUAL, SESSION_ITEMS, APPEND_MODE
from utils.goal_utils import GOALS
from utils.query_utils import MANUAL_INPUT

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip() if update.message and update.message.text else ""

    # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–Ω—è—Ç ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    if bool(context.user_data.get(BUSY)):
        return await update.message.reply_text("‚è≥ –Ø —Å–µ–π—á–∞—Å –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç ‚Äî –ø–æ–¥–æ–∂–¥–∏ —á—É—Ç—å-—á—É—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    if bool(context.user_data.get(AWAIT_MANUAL)):
        raw = list((text or "").split(","))
        to_add = normalize_items(raw)  # lower, –±–µ–∑ –¥—É–±–ª–µ–π
        if not to_add:
            return await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ü—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –ª—É–∫")

        # —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
        session_items = context.user_data.get(SESSION_ITEMS, [])
        append_mode = bool(context.user_data.get(APPEND_MODE))

        if append_mode:
            existing = set(session_items)
            new_only = [i for i in to_add if i not in existing]
            session_items = session_items + new_only
            highlights = set(new_only)
        else:
            session_items = to_add
            highlights = set()

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
        context.user_data[SESSION_ITEMS] = session_items
        context.user_data[AWAIT_MANUAL] = False

        # –ü–æ–∫–∞–∑–∞—Ç—å –ù–û–í–´–ô –ø—Ä–µ—á–µ–∫ (—Å—Ç–∞—Ä—ã–π –æ—Å—Ç–∞—ë—Ç—Å—è), —Å –ø–æ–º–µ—Ç–∫–æ–π ¬´+¬ª —É –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
        is_updated = append_mode and bool(highlights)  # True, –µ—Å–ª–∏ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        precheck = render_precheck(session_items, highlights, updated=is_updated)

        await update.message.reply_text(
            precheck,
            reply_markup=goal_choice_menu(),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return None

    # –ò–Ω–∞—á–µ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Ä—É—á–Ω—É—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Ä—É—á–Ω—É—é", callback_data=MANUAL_INPUT)]
        ])
    )

    return None


async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_input = query.data
    user_id = query.from_user.id

    match user_input:
        case query_utils.ADD_INGREDIENT:
            await my_ingredients(query)
        case query_utils.MAIN_MENU:
            await back_to_main_menu(query)
        case query_utils.BUY_PRO:
            await buy_pro(query)
        case query_utils.CHANGE_GOAL:
            await change_goal(query)
        case query_utils.CLEAR_INGREDIENTS:
            await clear_ingredients(user_id, query)
        case query_utils.DAILY_RECIPE:
            await daily_recipe(query)
        case query_utils.GOAL_RECIPE:
            await goal_recipe(query)
        case query_utils.MANUAL_INPUT:
            await manual_input(query, context)
        case query_utils.REGENERATE_RECIPE:
            await regenerate_recipe(query, context)
        case query_utils.SAVE_RECIPE:
            await save_recipe(user_id, query, context)
        case query_utils.UPLOAD_PHOTO:
            await upload_photo(query)
        case _:
            # –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ü–µ–ª—å —Ä–µ—Ü–µ–ø—Ç–∞
            if user_input in GOALS:
                await goal_recipe_choice(user_input, query, context)


def normalize_items(raw_items):
    uniq, seen = [], set()
    for x in raw_items:
        s = re.sub(r'\s+', ' ', x).strip(" .,!?:;\"'()[]").strip().lower()
        if s and s not in seen:
            seen.add(s)
            uniq.append(s)
    return uniq


def render_precheck(
        items: list[str],
        highlights: set[str] | None = None,
        updated: bool = False
) -> str:
    highlights = highlights or set()
    pretty = []
    for it in items:
        mark = " + " if it in highlights else ""
        pretty.append(f"‚Ä¢{mark}{smart_capitalize(it)}")
    body = "\n".join(pretty)

    title = "<b>‚úÖ –í–æ—Ç —Ç–≤–æ–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã</b>" if updated else "<b>–í–æ—Ç —Ç–≤–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã</b>"

    return (
        f"{title} (<i>{len(items)} —à—Ç.</i>)\n\n"
        f"{body}\n\n"
        "üéØ <b>–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å</b>: –ü–ü, –û–±—ã—á–Ω—ã–µ –∏ —Ç.–¥.\n"
        "<i>–ü–æ–¥—Å–∫–∞–∑–∫–∞: –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –Ω–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã¬ª –∏ –¥–æ–ø–æ–ª–Ω–∏ —Å–ø–∏—Å–æ–∫.</i>"
    )

# –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –ó–∞–≥–ª–∞–≤–Ω–æ–π –ö–∞–∂–¥–æ–≥–æ –°–ª–æ–≤–∞
def smart_capitalize(s: str) -> str:
    # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è ¬´–∫—Ä–∞—Å–Ω—ã–π –ª—É–∫¬ª, ¬´–º–∏–Ω–¥–∞–ª—å–Ω–æ–µ –º–æ–ª–æ–∫–æ¬ª –∏ —Ç.–ø.
    return " ".join(w[:1].upper() + w[1:] for w in s.split())
