import re
import html

def format_final_recipe(ai_text: str, goal_name: str) -> str:
    body = str(ai_text or "").replace("\r\n", "\n").strip()

    # ---- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ----
    title = None
    m = re.search(r"^\s*(?:\d+\)\s*)?\s*–ù–∞–∑–≤–∞–Ω–∏–µ\s*:\s*(.+)$",
                  body, flags=re.IGNORECASE | re.MULTILINE)
    if m:
        title = m.group(1).strip()
        body = re.sub(r"^\s*(?:\d+\)\s*)?\s*–ù–∞–∑–≤–∞–Ω–∏–µ\s*:.+$",
                      "", body, flags=re.IGNORECASE | re.MULTILINE)
    else:
        first_line = next((ln.strip() for ln in body.splitlines() if ln.strip()), "")
        title = first_line
        if first_line:
            body = body.replace(first_line, "", 1)

    # ---- –£–±—Ä–∞—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é ----
    body = re.sub(r"(?m)^\s*\d+\)\s*", "", body)

    # ---- –°–ø–∏—Å–∫–∏: '-'/'*' -> '‚Ä¢ ' ----
    body = re.sub(r"(?m)^\s*-\s+", "‚Ä¢ ", body)
    body = re.sub(r"(?m)^\s*\*\s+", "‚Ä¢ ", body)

    # ---- –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ ----
    def header(h: str) -> str:
        return f"\n\n<b>{h}:</b>\n"

    body = re.sub(r"(?im)^\s*(?:\d+\)\s*)?–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\s*:\s*$",
                  header("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"), body)
    body = re.sub(r"(?im)^\s*(?:\d+\)\s*)?–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\s*:\s*",
                  header("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"), body)
    body = re.sub(r"(?im)^\s*(?:\d+\)\s*)?—à–∞–≥–∏\s*:\s*$",
                  header("–®–∞–≥–∏"), body)
    body = re.sub(r"(?im)^\s*(?:\d+\)\s*)?—à–∞–≥–∏\s*:\s*",
                  header("–®–∞–≥–∏"), body)
    body = re.sub(r"(?im)^\s*(?:\d+\)\s*)?–∫–±–∂—É.*:\s*$",
                  header("–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é"), body)
    body = re.sub(r"(?im)^\s*(?:\d+\)\s*)?–∫–±–∂—É.*:\s*",
                  header("–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é"), body)
    body = re.sub(r"(?im)^\s*(?:\d+\)\s*)?—Å–æ–≤–µ—Ç—ã/?–∑–∞–º–µ–Ω—ã\s*:\s*$",
                  header("–°–æ–≤–µ—Ç—ã/–∑–∞–º–µ–Ω—ã"), body)
    body = re.sub(r"(?im)^\s*(?:\d+\)\s*)?—Å–æ–≤–µ—Ç—ã/?–∑–∞–º–µ–Ω—ã\s*:\s*",
                  header("–°–æ–≤–µ—Ç—ã/–∑–∞–º–µ–Ω—ã"), body)

    # ---------- –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ö–ë–ñ–£ –≤ —Å–ø–∏—Å–æ–∫ ----------
    # –ò–¥–µ—è: –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ "<b>–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é</b>" —á–∞—Å—Ç–æ –∏–¥—ë—Ç –≤—Å—ë –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É:
    # "–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å ~350 –∫–∫–∞–ª; –±–µ–ª–∫–∏ ~15 –≥; –∂–∏—Ä—ã ~9 –≥; —É–≥–ª–µ–≤–æ–¥—ã ~35 –≥"
    # –ù–∏–∂–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ—ë –≤ –ø—É–Ω–∫—Ç—ã "‚Ä¢ ...".
    lines = body.splitlines()
    new_lines = []
    in_kbju = False
    converted_this_block = False

    for ln in lines:
        stripped = ln.strip()

        # –≤–æ—à–ª–∏ –≤ —Å–µ–∫—Ü–∏—é –ö–ë–ñ–£
        if stripped.startswith("<b>–ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é</b>"):
            in_kbju = True
            converted_this_block = False
            new_lines.append(ln)
            continue

        if in_kbju:
            # –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ –ö–ë–ñ–£ ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –Ω–æ–≤—ã–π –∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if stripped == "" or stripped.startswith("<b>"):
                in_kbju = False
                converted_this_block = False
                new_lines.append(ln)
                continue

            # –ø–µ—Ä–≤—É—é —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ö–ë–ñ–£ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ "–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É" –≤ –ø—É–Ω–∫—Ç—ã
            if not converted_this_block:
                # –¥—Ä–æ–±–∏–º –ø–æ ; , . (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏/–±–µ–∑)
                parts = re.split(r"[;,.]\s*", stripped)
                parts = [p.strip(" -‚Äì‚Äî") for p in parts if p.strip()]
                if len(parts) >= 2:
                    for p in parts:
                        new_lines.append("‚Ä¢ " + p)
                    converted_this_block = True
                    continue  # —ç—Ç—É —Å—Ç—Ä–æ–∫—É —É–∂–µ —Ü–µ–ª–∏–∫–æ–º –∑–∞–º–µ–Ω–∏–ª–∏
                # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å

        new_lines.append(ln)

    body = "\n".join(new_lines)

    # ---- –ò—Ç–æ–≥–æ –≤—Ä–µ–º—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º ----
    def time_block(mo: re.Match) -> str:
        value = mo.group(1).strip()
        return f"\n\n<b>‚è± –ò—Ç–æ–≥–æ –≤—Ä–µ–º—è:</b> {html.escape(value)}\n"

    body = re.sub(r"(?im)^\s*(?:‚è±\s*)?–∏—Ç–æ–≥–æ\s+–≤—Ä–µ–º—è\s*:\s*(.+)$",
                  time_block, body, count=1, flags=re.MULTILINE)

    # ---- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–∏ -> üéØ–¶–µ–ª—å: ... ----
    def goal_block(mo: re.Match) -> str:
        explanation = mo.group(1).strip()
        head = f"\n\n<b>üéØ–¶–µ–ª—å: {html.escape(goal_name)}</b>"
        return head + ("\n" + html.escape(explanation) if explanation else "")

    body = re.sub(r"(?im)^\s*(?:\d+\)\s*)?[üéØ]?\s*—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ\s+—Ü–µ–ª–∏\s*:\s*(.+)$",
                  goal_block, body, count=1, flags=re.MULTILINE)

    # ---- –ß–∏—Å—Ç–∏–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ ----
    body = re.sub(r"\n{3,}", "\n\n", body).strip()
    title_html = f"<b>{html.escape((title or '').upper())}</b>" if title else ""
    out = f"{title_html}\n\n{body}" if title_html else body
    return out.strip()
