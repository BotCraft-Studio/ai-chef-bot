# src/providers/gigachat.py
import aiohttp, base64, time, uuid, json, re
from typing import Optional, List

from src.config import (
    GIGACHAT_BASE_URL, GIGACHAT_CLIENT_ID, GIGACHAT_CLIENT_SECRET,
    GIGACHAT_SCOPE, GIGACHAT_VERIFY_SSL,
    GIGACHAT_TEXT_MODEL, GIGACHAT_VISION_MODEL,   # üëà –¥–æ–±–∞–≤–∏–ª–∏
)
from utils.bot_utils import TIME_LIMITS  # üëà –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π –ª–∏–º–∏—Ç

TOKEN_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

class GigaChatClient:
    """–ö–ª–∏–µ–Ω—Ç GigaChat: OAuth (NGW) + chat/completions (gigachat)."""
    def __init__(self):
        if not GIGACHAT_CLIENT_ID or not GIGACHAT_CLIENT_SECRET:
            raise RuntimeError("GIGACHAT_CLIENT_ID/GIGACHAT_CLIENT_SECRET –Ω–µ –∑–∞–¥–∞–Ω—ã")
        self._access_token: Optional[str] = None
        self._exp: float = 0.0

    async def _ensure_token(self):
        """–ë–µ—Ä—ë–º access_token –ø–æ client_credentials –Ω–∞ NGW-—Ö–æ—Å—Ç–µ."""
        if self._access_token and time.time() < self._exp - 60:
            return

        auth = base64.b64encode(f"{GIGACHAT_CLIENT_ID}:{GIGACHAT_CLIENT_SECRET}".encode()).decode()
        headers = {
            "Authorization": f"Basic {auth}",
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
            "RqUID": str(uuid.uuid4()),
        }
        data = {"scope": GIGACHAT_SCOPE}

        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as s:
            async with s.post(
                TOKEN_URL, headers=headers, data=data,
                ssl=(False if not GIGACHAT_VERIFY_SSL else None)
            ) as r:
                txt = await r.text()
                if r.status >= 400:
                    raise RuntimeError(f"OAuth {r.status} {txt}")
                try:
                    js = json.loads(txt)
                except json.JSONDecodeError:
                    raise RuntimeError(f"OAuth decode error: {txt[:400]}")


        self._access_token = js.get("access_token")
        # –≤ –õ–ö –ø–∏—à—É—Ç ~30 –º–∏–Ω—É—Ç. –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç expires_at ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
        self._exp = time.time() + int(js.get("expires_at") or 1800)

    async def _post_json(self, path: str, payload: dict) -> dict:
        """POST –Ω–∞ gigachat.../api/v1 —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ 401."""
        await self._ensure_token()
        timeout = aiohttp.ClientTimeout(total=30)
        url = f"{GIGACHAT_BASE_URL}{path}"

        async def _do(headers):
            async with aiohttp.ClientSession(timeout=timeout) as s:
                async with s.post(url, headers=headers, json=payload,
                                ssl=(False if not GIGACHAT_VERIFY_SSL else None)) as r:
                    txt = await r.text()
                    if r.status == 401:
                        raise PermissionError("unauthorized", txt)
                    if r.status >= 400:
                        raise RuntimeError(f"{r.status} {txt}")
                    return json.loads(txt)

        headers = {
            "Authorization": f"Bearer {self._access_token}",
            "Content-Type": "application/json",
            "Accept": "application/json",
        }
        try:
            return await _do(headers)
        except PermissionError:
            # —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª ‚Äî –æ–±–Ω–æ–≤–∏–º –∏ –ø–æ–≤—Ç–æ—Ä–∏–º –æ–¥–∏–Ω —Ä–∞–∑
            await self._ensure_token()
            headers["Authorization"] = f"Bearer {self._access_token}"
            return await _do(headers)

    async def _upload_file(self, image_bytes: bytes, filename: str = "photo.jpg") -> dict:
        await self._ensure_token()
        headers = {"Authorization": f"Bearer {self._access_token}"}

        form = aiohttp.FormData()
        form.add_field("purpose", "general")
        form.add_field("file", image_bytes, filename=filename, content_type="image/jpeg")

        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as s:
            async with s.post(f"{GIGACHAT_BASE_URL}/files",
                            headers=headers, data=form,
                            ssl=(False if not GIGACHAT_VERIFY_SSL else None)) as r:
                txt = await r.text()
                if r.status >= 400:
                    raise RuntimeError(f"Upload {r.status} {txt}")
                try:
                    return json.loads(txt)
                except json.JSONDecodeError:
                    raise RuntimeError(f"Upload decode error: {txt[:400]}")


class GigaChatText(GigaChatClient):
    GOAL_GUIDELINES = {
        "–ü–æ—Ö—É–¥–µ—Ç—å": "–î–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π, –±–µ–∑ —Å–∞—Ö–∞—Ä–∞, –º–∏–Ω–∏–º—É–º –º–∞—Å–ª–∞. –ë–µ–ª–∫–∞ 25‚Äì35% –∫–∞–ª–æ—Ä–∏–π, –∂–∞—Ä–∫—É –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–ø–µ–∫–∞–Ω–∏–µ–º/—Ç—É—à–µ–Ω–∏–µ–º.",
        "–ü–ü (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ)": "–°–±–∞–ª–∞–Ω—Å–∏—Ä—É–π –ë–ñ–£, —Ü–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –º–∏–Ω–∏–º—É–º –æ–±—Ä–∞–±–æ—Ç–∫–∏, –±–µ–∑ —Å–∞—Ö–∞—Ä–∞ –∏ —Ç—Ä–∞–Ω—Å–∂–∏—Ä–æ–≤.",
        "–ë—ã—Å—Ç—Ä–æ": "–ì–æ—Ç–æ–≤–∫–∞ ‚â§ 20 –º–∏–Ω—É—Ç, –º–∏–Ω–∏–º—É–º —à–∞–≥–æ–≤ –∏ –ø–æ—Å—É–¥—ã.",
        "–û–±—ã—á–Ω—ã–µ": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç –±–µ–∑ —Å—Ç—Ä–æ–≥–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
        "–í–µ–≥–∞–Ω": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è.",
        "–ö–µ—Ç–æ-–ø–∏—Ç–∞–Ω–∏–µ": "–£–≥–ª–µ–≤–æ–¥—ã <10% –∫–∞–ª–æ—Ä–∏–π, –∂–∏—Ä—ã –≤—ã—Å–æ–∫–∏–µ, –±–µ–∑ —Å–∞—Ö–∞—Ä–∞/–∫—Ä–∞—Ö–º–∞–ª–∏—Å—Ç—ã—Ö."
    }

    async def parse_ingredients(self, ingredients: list[str]) -> str:
        # 1) –î–æ—Å—Ç–∞—ë–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        goal_line = next((x for x in ingredients if x.startswith("–¶–µ–ª—å:")), None)
        time_line = next((x for x in ingredients if x.startswith("–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏:")), None)

        goal_name = goal_line.split(":", 1)[1].strip() if goal_line else "–û–±—ã—á–Ω—ã–µ"
        time_text = time_line.split(":", 1)[1].strip() if time_line else "–ù–µ –≤–∞–∂–Ω–æ"

        # 2) –ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        pure_items = [x for x in ingredients if not x.startswith(("–¶–µ–ª—å:", "–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏:"))]

        # 3) –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö) –ø–æ time_text ‚Üí –ø–æ –∫–Ω–æ–ø–∫–µ, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        # –¢.–∫. –≤ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç "–î–æ 15 –º–∏–Ω"/"–ù–µ –≤–∞–∂–Ω–æ", –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–¥—Ä–∞—Ç—å —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞:
        import re
        match = re.search(r"(\d+)", time_text)
        time_limit = int(match.group(1)) if match else None  # None = –Ω–µ—Ç –ª–∏–º–∏—Ç–∞

        # 4) –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–¥ —Ü–µ–ª—å
        rules = self.GOAL_GUIDELINES.get(goal_name, "–ì–æ—Ç–æ–≤—å –æ–±—ã—á–Ω—ã–π –¥–æ–º–∞—à–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç.")

        # 5) –ñ—ë—Å—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∞—Ç—É –∏ –≤—Ä–µ–º–µ–Ω–∏
        hard_time_rule = (
            f"–°–û–ë–õ–Æ–î–ê–ô –æ–±—â–∏–π –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏: –Ω–µ –±–æ–ª—å—à–µ {time_limit} –º–∏–Ω—É—Ç. "
            "–ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –æ–±—ã—á–Ω–æ –¥–æ–ª—å—à–µ ‚Äî —Å–æ–∫—Ä–∞—Ç–∏/—É–ø—Ä–æ—Å—Ç–∏ (–º–µ–ª—å—á–µ –Ω–∞—Ä–µ–∑–∫–∞, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —à–∞–≥–∏, –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã —Ç–∏–ø–∞ –≥–æ—Ç–æ–≤–æ–≥–æ —Ä–∏—Å–∞ –≤ –ø–∞–∫–µ—Ç–∏–∫–∞—Ö). "
            "–ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ —É–∫–ª–∞–¥—ã–≤–∞–µ—à—å—Å—è ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –±—ã—Å—Ç—Ä—ã–µ –∑–∞–º–µ–Ω—ã –ø—Ä—è–º–æ –≤ —à–∞–≥–µ."
        ) if time_limit else "–ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ü–µ–Ω–∏–≤–∞–π –≤—Ä–µ–º—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–∞—Ç–∫–æ."

        user_prompt = (
            "–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –†–ï–¶–ï–ü–¢ –∏–∑ —ç—Ç–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: " + ", ".join(pure_items) + ". "
            f"–¶–µ–ª—å: {goal_name}. {rules} "
            f"–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ (–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ): {time_text}. {hard_time_rule} "
            "–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –¥–æ–±–∞–≤—å –±–∞–∑–æ–≤—ã–µ –∫–ª–∞–¥–æ–≤—ã–µ (–º–∞—Å–ª–æ, —Å–æ–ª—å, –ø–µ—Ä–µ—Ü). "
            "–ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.\n\n"
            "–°–¢–†–û–ì–û–ô –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:\n"
            "1) –ù–∞–∑–≤–∞–Ω–∏–µ: <–∫—Ä–∞—Ç–∫–æ>\n"
            "2) –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–Ω–∞ 2‚Äì4 –ø–æ—Ä—Ü–∏–∏): —Å–ø–∏—Å–æ–∫ —Å –≥—Ä–∞–º–º–∞–º–∏\n"
            "3) –®–∞–≥–∏: 5‚Äì8 –ø—É–Ω–∫—Ç–æ–≤. –£–∫–∞–∑—ã–≤–∞–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —à–∞–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–æ–±–∂–∞—Ä–∏—Ç—å 3‚Äì4 –º–∏–Ω¬ª). –†–∞–∑—Ä–µ—à–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.\n"
            "4) ‚è± –ò—Ç–æ–≥–æ –≤—Ä–µ–º—è: <—á–∏—Å–ª–æ> –º–∏–Ω—É—Ç\n"
            "5) –ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é: –ö–∞–ª–æ—Ä–∏–∏, –ë–µ–ª–∫–∏, –ñ–∏—Ä—ã, –£–≥–ª–µ–≤–æ–¥—ã (–æ—Ü–µ–Ω–æ—á–Ω–æ)\n"
            "6) üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–∏: 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø–æ—á–µ–º—É —Ä–µ—Ü–µ–ø—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç —Ü–µ–ª–∏)\n"
            "7) –°–æ–≤–µ—Ç—ã/–∑–∞–º–µ–Ω—ã: 2‚Äì4 –ø—É–Ω–∫—Ç–∞\n"
        )

        payload = {
            "model": GIGACHAT_TEXT_MODEL,
            "messages": [
                {"role": "system", "content": "–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–Ω–∏—Å—Ç. –ü–∏—à–∏ —á—ë—Ç–∫–æ, –±–µ–∑ –≤–æ–¥—ã."},
                {"role": "user", "content": user_prompt}
            ],
            "maxTokens": 900,
            "profanity_check": True,
            "temperature": 0.4,
        }

        js = await self._post_json("/chat/completions", payload)
        return (js.get("choices") or [{}])[0].get("message", {}).get("content", "").strip()
        
class GigaChatVision(GigaChatClient):
    async def parse_ingredients(self, image_bytes: bytes) -> list[str]:
        up = await self._upload_file(image_bytes, filename="photo.jpg")
        file_id = up.get("id") or up.get("file_id")
        if not file_id:
            raise RuntimeError(f"–ù–µ—Ç id —É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {up}")

        payload = {
            "model": GIGACHAT_VISION_MODEL, # üëà vision-–º–æ–¥–µ–ª—å
            "messages": [
                {
                    "role": "user",
                    "content": (
                        "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω—ã –Ω–∞ —Ñ–æ—Ç–æ? –í–µ—Ä–Ω–∏ –ß–Å–¢–ö–ò–ô —Å–ø–∏—Å–æ–∫, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É.\n\n"
                        "–ø—Ä–∏–º–µ—Ä:\n- –ì–æ–≤—è–¥–∏–Ω–∞\n- –ü–æ–º–∏–¥–æ—Ä—ã\n- –õ—É–∫\n- –•–ª–µ–±"
                    ),
                    "attachments": [file_id] # üëà —Å–ø–∏—Å–æ–∫ ID
                }
            ],
            "maxTokens": 600,
            "profanity_check": True
        }
        js = await self._post_json("/chat/completions", payload)
        text = (js.get("choices") or [{}])[0].get("message", {}).get("content", "")
        lines = [re.sub(r"^[-‚Ä¢*]\s*|\d+[.)]\s*", "", s).strip() for s in str(text).splitlines()]
        return [s for s in lines if s]
