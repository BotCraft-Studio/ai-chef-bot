# src/providers/gigachat.py
import aiohttp, base64, time, uuid, json, re
from typing import Optional, List

from src.config import (
    GIGACHAT_BASE_URL, GIGACHAT_CLIENT_ID, GIGACHAT_CLIENT_SECRET,
    GIGACHAT_SCOPE, GIGACHAT_VERIFY_SSL,
    GIGACHAT_TEXT_MODEL, GIGACHAT_VISION_MODEL,   # üëà –¥–æ–±–∞–≤–∏–ª–∏
)

TOKEN_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

class GigaChatClient:
    """–ö–ª–∏–µ–Ω—Ç GigaChat: OAuth (NGW) + chat/completions (gigachat)."""
    def __init__(self):
        if not GIGACHAT_CLIENT_ID or not GIGACHAT_CLIENT_SECRET:
            raise RuntimeError("GIGACHAT_CLIENT_ID/GIGACHAT_CLIENT_SECRET –Ω–µ –∑–∞–¥–∞–Ω—ã")
        self._access_token: Optional[str] = None
        self._exp: float = 0.0

    async def _ensure_token(self):
        """–ë–µ—Ä—ë–º access_token –ø–æ client_credentials –Ω–∞ NGW-—Ö–æ—Å—Ç–µ."""
        if self._access_token and time.time() < self._exp - 60:
            return

        auth = base64.b64encode(f"{GIGACHAT_CLIENT_ID}:{GIGACHAT_CLIENT_SECRET}".encode()).decode()
        headers = {
            "Authorization": f"Basic {auth}",
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
            "RqUID": str(uuid.uuid4()),
        }
        data = {"scope": GIGACHAT_SCOPE}

        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as s:
            async with s.post(
                TOKEN_URL, headers=headers, data=data,
                ssl=(False if not GIGACHAT_VERIFY_SSL else None)
            ) as r:
                txt = await r.text()
                if r.status >= 400:
                    raise RuntimeError(f"OAuth {r.status} {txt}")
                try:
                    js = json.loads(txt)
                except json.JSONDecodeError:
                    raise RuntimeError(f"OAuth decode error: {txt[:400]}")


        self._access_token = js.get("access_token")
        # –≤ –õ–ö –ø–∏—à—É—Ç ~30 –º–∏–Ω—É—Ç. –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç expires_at ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
        self._exp = time.time() + int(js.get("expires_at") or 1800)

    async def _post_json(self, path: str, payload: dict) -> dict:
        """POST –Ω–∞ gigachat.../api/v1 —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ 401."""
        await self._ensure_token()
        timeout = aiohttp.ClientTimeout(total=30)
        url = f"{GIGACHAT_BASE_URL}{path}"

        async def _do(headers):
            async with aiohttp.ClientSession(timeout=timeout) as s:
                async with s.post(url, headers=headers, json=payload,
                                ssl=(False if not GIGACHAT_VERIFY_SSL else None)) as r:
                    txt = await r.text()
                    if r.status == 401:
                        raise PermissionError("unauthorized", txt)
                    if r.status >= 400:
                        raise RuntimeError(f"{r.status} {txt}")
                    return json.loads(txt)

        headers = {
            "Authorization": f"Bearer {self._access_token}",
            "Content-Type": "application/json",
            "Accept": "application/json",
        }
        try:
            return await _do(headers)
        except PermissionError:
            # —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª ‚Äî –æ–±–Ω–æ–≤–∏–º –∏ –ø–æ–≤—Ç–æ—Ä–∏–º –æ–¥–∏–Ω —Ä–∞–∑
            await self._ensure_token()
            headers["Authorization"] = f"Bearer {self._access_token}"
            return await _do(headers)

    async def _upload_file(self, image_bytes: bytes, filename: str = "photo.jpg") -> dict:
        await self._ensure_token()
        headers = {"Authorization": f"Bearer {self._access_token}"}

        form = aiohttp.FormData()
        form.add_field("purpose", "general")
        form.add_field("file", image_bytes, filename=filename, content_type="image/jpeg")

        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as s:
            async with s.post(f"{GIGACHAT_BASE_URL}/files",
                            headers=headers, data=form,
                            ssl=(False if not GIGACHAT_VERIFY_SSL else None)) as r:
                txt = await r.text()
                if r.status >= 400:
                    raise RuntimeError(f"Upload {r.status} {txt}")
                try:
                    return json.loads(txt)
                except json.JSONDecodeError:
                    raise RuntimeError(f"Upload decode error: {txt[:400]}")


class GigaChatText(GigaChatClient):
    async def parse_ingredients(self, ingredients: List[str]) -> str:
        """
        –¢–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ ‚Äî —Ä–æ–≤–Ω–æ –∫–∞–∫ –≤ –õ–ö: /chat/completions —Å messages.
        """
        user_prompt = (
            "–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –†–ï–¶–ï–ü–¢ –∏–∑ —ç—Ç–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: " + ", ".join(ingredients) +
            ". –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –¥–æ–±–∞–≤—å –±–∞–∑–æ–≤—ã–µ –∫–ª–∞–¥–æ–≤—ã–µ (–º–∞—Å–ª–æ, —Å–æ–ª—å, –ø–µ—Ä–µ—Ü). "
            "–£–∫–∞–∂–∏ –ö–ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é (–æ—Ü–µ–Ω–æ—á–Ω–æ). –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –ù–∞–∑–≤–∞–Ω–∏–µ; –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–≥—Ä–∞–º–º—ã); –®–∞–≥–∏ (5‚Äì8); –ö–ë–ñ–£; –°–æ–≤–µ—Ç—ã/–∑–∞–º–µ–Ω—ã."
        )
        payload = {
            "model": GIGACHAT_TEXT_MODEL, # üëà —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": "–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–Ω–∏—Å—Ç. –ü–∏—à–∏ —á—ë—Ç–∫–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ñ—Ä–∞–∑."},
                {"role": "user", "content": user_prompt}
            ],
            "temperature": 0.4,
            "maxTokens": 900,
            "profanity_check": True
        }
        js = await self._post_json("/chat/completions", payload)
        return (js.get("choices") or [{}])[0].get("message", {}).get("content", "").strip()
        
class GigaChatVision(GigaChatClient):
    async def parse_ingredients(self, image_bytes: bytes) -> list[str]:
        up = await self._upload_file(image_bytes, filename="photo.jpg")
        file_id = up.get("id") or up.get("file_id")
        if not file_id:
            raise RuntimeError(f"–ù–µ—Ç id —É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {up}")

        payload = {
            "model": GIGACHAT_VISION_MODEL, # üëà vision-–º–æ–¥–µ–ª—å
            "messages": [
                {
                    "role": "user",
                    "content": (
                        "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω—ã –Ω–∞ —Ñ–æ—Ç–æ? –í–µ—Ä–Ω–∏ –ß–Å–¢–ö–ò–ô —Å–ø–∏—Å–æ–∫, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É.\n\n"
                        "–ø—Ä–∏–º–µ—Ä:\n- –ì–æ–≤—è–¥–∏–Ω–∞\n- –ü–æ–º–∏–¥–æ—Ä—ã\n- –õ—É–∫\n- –•–ª–µ–±"
                    ),
                    "attachments": [file_id] # üëà —Å–ø–∏—Å–æ–∫ ID
                }
            ],
            "maxTokens": 600,
            "profanity_check": True
        }
        js = await self._post_json("/chat/completions", payload)
        text = (js.get("choices") or [{}])[0].get("message", {}).get("content", "")
        lines = [re.sub(r"^[-‚Ä¢*]\s*|\d+[.)]\s*", "", s).strip() for s in str(text).splitlines()]
        return [s for s in lines if s]
